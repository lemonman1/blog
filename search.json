[{"title":"Java中的变量、基本数据类型及运算符","url":"/Java%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F%E3%80%81%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E8%BF%90%E7%AE%97%E7%AC%A6/","content":"<p>Java 中的变量、基本数据类型及运算符</p>\n<p><span id=\"more\"></span></p>\n<h3 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h3>\n<blockquote>\n<p>变量来源于数学，是计算机语言中能储存计算结果或能表示值抽象概念。变量可以通过变量名访问。在指令式语言中，变量通常是可变的；但在纯函数式语言（如 Haskell）中，变量可能是不可变的。在一些语言中，变量可能被明确为是能表示可变状态、具有存储空间的抽象（如在 Java 和 Visual Basic 中）；但另外一些语言可能使用其它概念（如 C 的对象）来指称这种抽象，而不严格地定义 “变量” 的准确外延。——<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEYlOTglRTklODclOEYvMzk1Njk2OD9mcj1hbGFkZGlu\"> 百度百科</span></p>\n</blockquote>\n<h5 id=\"标识符的命名规则\"><a class=\"anchor\" href=\"#标识符的命名规则\">#</a> 标识符的命名规则</h5>\n<ol>\n<li>\n<p>标识符只能由数字、字母、下划线、$ 这四种字符组成。</p>\n</li>\n<li>\n<p>标识符的首字符不能是数字。</p>\n</li>\n<li>\n<p>标识符区分大小写的。如：变量 a 或变量 A 代表两个不同的变量。</p>\n</li>\n<li>\n<p>标识符不能是系统的保留字，如：public void int ... 都不能作为变量名。</p>\n<p><strong>例如：</strong> test、$abc01、_name5 等</p>\n</li>\n</ol>\n<h5 id=\"标识符的命名规范\"><a class=\"anchor\" href=\"#标识符的命名规范\">#</a> 标识符的命名规范</h5>\n<ol>\n<li>一般对变量、方法都是用驼峰式命名法（首单词的首字母小写，以后每个单词首字母大写）<strong>如：studentId、studentName</strong></li>\n<li>对类名、接口名一般使用 pascal（帕斯卡命名法），每个单词的首字母均大写。</li>\n<li>标识符一般尽量做到望文生义。** 如：name、age、addr、sex、id 等。</li>\n</ol>\n<h5 id=\"变量的声明及赋值\"><a class=\"anchor\" href=\"#变量的声明及赋值\">#</a> 变量的声明及赋值</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 声明一个变量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        a <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 给一个变量赋值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token class-name\">A</span> <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 声明一个变量并同时赋值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h3>\n<h5 id=\"整数类型byte-short-int-long\"><a class=\"anchor\" href=\"#整数类型byte-short-int-long\">#</a> 整数类型（byte short int long）</h5>\n<blockquote>\n<p>**byte：** 字节类型，占一个字节，8 位 ，范围：-128 到 127<br />\n**short：** 短整型，占两个字节，范围：-32768 到 32767<br />\n**int：** 整型，占四个字节，范围：-2147483648 到 2147483647?<br />\n**long：** 长整型，占 8 个字节，范围：-9223372036854775808 到 9223372036854775807</p>\n</blockquote>\n<h5 id=\"浮点类型float-double\"><a class=\"anchor\" href=\"#浮点类型float-double\">#</a> 浮点类型（float double）</h5>\n<blockquote>\n<p>**float：** 单精度度浮点型，占 4 个字节，保留小数点后 7 位<br />\n **double：** 双精度浮点型，占 8 个字节，保留小数点后 15 位<br />\n ** 注意：** 声明 float 类型时候需要写成 <code>float f = 2.3456f</code> ，因为 java 中小数默认是 double 类型。</p>\n</blockquote>\n<h5 id=\"字符类型char\"><a class=\"anchor\" href=\"#字符类型char\">#</a> 字符类型（char）</h5>\n<blockquote>\n<p>一个字符型对应 ASCII 码的值，因此字符类型可以进行计算和比较大小。<br />\n①小写字母 'a' 到 'z' 对应于 97-122<br />\n②大写字母 'A' 到 'Z' 对应于 65-90<br />\n③字符 '0' 到 '9' 对应于 48-57</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ch = \"</span> <span class=\"token operator\">+</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> ch1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 将字符 'a' 转化为 'A'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ch1 = \"</span> <span class=\"token operator\">+</span> ch1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"布尔类型boolean\"><a class=\"anchor\" href=\"#布尔类型boolean\">#</a> 布尔类型（boolean）</h5>\n<blockquote>\n<p>布尔类型只能是 true 或者 false</p>\n</blockquote>\n<h3 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<h5 id=\"算术运算符单目运算符与双目运算符\"><a class=\"anchor\" href=\"#算术运算符单目运算符与双目运算符\">#</a> 算术运算符（单目运算符与双目运算符）</h5>\n<ul>\n<li>** 双目运算符：** 就是需要有两个运算数参与的运算符，如：+ - * / %</li>\n<li>** 单目运算符：** 就是只需要有一个运算数就可进行运算的运算符，如：++ - -<br />\n①在单独使用时，无论是前加还是后加，前减还是后减，最后结果都是其自加 1 或者自减 1。<br />\n②与表达式一起使用时候，前<ins>表示先自加 1 再进行表达式运算，后</ins>表示参与运算后再进行自加 1，前后 &quot;- -&quot; 用法与 ++ 相同。<br />\n<strong>例如：</strong></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> c <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//a 的值先赋给 c，然后进行自加 1，所以此时 c = 10,a = 11</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>a<span class=\"token punctuation\">;</span>\t  <span class=\"token comment\">//a 先自加 1，然后再赋值给 c，此时 c = 12 ,a = 12</span></pre></td></tr></table></figure><h5 id=\"关系运算符\"><a class=\"anchor\" href=\"#关系运算符\">#</a> 关系运算符（&gt;  &gt;=  &lt;  &lt;=  ==  !=）</h5>\n<blockquote>\n<p>关系运算符主要用于比较，两边可以是具体数据，也可以是表达式，其最终运算结果返回一个布尔类型，即 true 或者 false。</p>\n</blockquote>\n<h4 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符（&amp;&amp;  ||  ！）</h4>\n<blockquote>\n<p>** 作用：** 用于连接关系表达式<br />\n ** 逻辑与（&amp;&amp;）：** 所有表达式都为 true 时，整个逻辑运算结果才为 true。** 短路：** 参与运算的多个表达式只要有一个为 false，其后的表达式就不再执行了。<br />\n** 逻辑或（||）：** 参与运算的多个表达式只要有一个为 true, 整个表达式就返回 true。** 短路：** 如果参与运算的多个表达式有一个为 true, 其后的表达式就不会再执行了<br />\n ** 逻辑非（！）：** 可以将一个表达式的布尔结果取反。</p>\n</blockquote>\n<h5 id=\"赋值运算符\"><a class=\"anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h5>\n<ul>\n<li>简单赋值运算符：=</li>\n</ul>\n<blockquote>\n<p><code>int a = 10    //将一个值赋给一个变量</code></p>\n</blockquote>\n<ul>\n<li>复合赋值运算符：+=   -=  *=  /=</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 简单赋值运算符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> a <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 相当于：a = a + 5;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 相当于：a = a + 1; 即 a++;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> a <span class=\"token operator\">-=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 相当于：a = a - 4;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> a <span class=\"token operator\">*=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 相当于：a = a * 3;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> a <span class=\"token operator\">/=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 相当于：a = a / 3;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> a <span class=\"token operator\">%=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 相当于：a = a % 3;</span></pre></td></tr></table></figure><blockquote>\n<p>** 注意：** 复合赋值运算符不会改变变量的数据类型，当计算结果大于其数据类型时，会自动强制转换为当前数据类型<br />\n<strong>如下：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">byte</span> a <span class=\"token operator\">=</span><span class=\"token number\">10</span>     <span class=\"token comment\">// 当使用 a = a * 250 时程序会报错，因为计算结果 2500 超出了 byte 类型的范围，而使用 a *= 250</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">*=</span> <span class=\"token number\">250</span>\t   <span class=\"token comment\">// 时程序就不会报错，其实赋值运算的会有一个默认的强制转换。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                   <span class=\"token comment\">// 本程序中 a *= 250 等价于 a = (byte)(a * 250)</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<ul>\n<li><strong>数据类型：</strong> <code>byte &lt; short = char &lt; int &lt; long &lt; float&lt; double</code>  表示了数据类型的强弱，弱数据类型向强数据类型转换时，可以自动完成数据类型的转换，强类型向弱类型转换时，需要加上强制转换符，并且可能丢失精度。</li>\n<li>** 运算符的优先级：** 算术运算符 &gt; 关系运算符 &gt; 逻辑运算符 &gt; 赋值运算符</li>\n</ul>\n<blockquote>\n<p>()<br />\n++ - - ！<br />\n*/ %<br />\n+ -<br />\n\\ &gt; &gt;= &lt; &lt;= == !=<br />\n&amp;&amp;<br />\n||<br />\n= += -= *= /= %=</p>\n</blockquote>\n","categories":["java学习"],"tags":["变量","数据类型","运算符"]},{"title":"Java学习札记二","url":"/Java%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E4%BA%8C/","content":"<p>Java 学习札记二</p>\n<p><span id=\"more\"></span></p>\n<h4 id=\"类和对象的关系\"><a class=\"anchor\" href=\"#类和对象的关系\">#</a> 类和对象的关系</h4>\n<ul>\n<li>对象是具体的，实实在在存在的，是现实生活中看得见也摸得着的的个体。</li>\n<li>类是抽象的，是现实中很多有共同特性的事物的统称。</li>\n<li>使用对象时需要先实例化，再为其属性赋值，最后调用方法。</li>\n</ul>\n<h4 id=\"类的构造方法\"><a class=\"anchor\" href=\"#类的构造方法\">#</a> 类的构造方法</h4>\n<p>** 构造方法的作用：** 实现局部变量为全局变量（简化了对象的赋值操作）</p>\n<ol>\n<li>构造方法一般使用 public 修饰。<strong>在单例时会用到 private</strong>。</li>\n<li>构造函数没有返回值，也不能使用 void 修饰。</li>\n<li>构造方法名必须和类名一致。</li>\n<li>一个类在没有任何构造方法的时候，Java 虚拟机会提供一个无参的默认构造函数，但是一旦设置了构造函数，Java 虚拟机将不再提供任何构造方法了，因此一般在自己定义了构造方法的时候，都会添加一条无参的构造函数。</li>\n</ol>\n<h4 id=\"this关键字\"><a class=\"anchor\" href=\"#this关键字\">#</a> this 关键字</h4>\n<ul>\n<li>在构造方法中使用 this 就会，将局部变量的值赋给全局变量，如果没有 this 就会更加系统的就近原则进行赋值。</li>\n<li>this 在构造方法中就代表当前对象。</li>\n<li>可以通过 this（参数）进行调用本类的其他构造方法，但是只能放在调用方法的第一行，因此一个构造方法中只能调用一次其他构造方法。</li>\n</ul>\n<h4 id=\"tostring方法和equals方法\"><a class=\"anchor\" href=\"#tostring方法和equals方法\">#</a> toString () 方法和 equals () 方法</h4>\n<blockquote>\n<p>**toString () 方法：** 直接打印某个对象时，其实就是调用对象的 toString 方法。因此我经常会在类中重写 toString () 方法，可以简化对对象属性的打印输出。在没有重写的情况下调用父类的 toString () 方法，在没有继承的情况下就调用 Object 类的 toSring 方法，其返回值为： <code>getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());</code> <br />\n**equals () 方法：** 用于比较两个对象是否为同一个对象，在实际中认为是同一个对象的规则不一样，因此该方法会经常按照我们的对比规则重写。在没有重写的情况下，会调用父类的 equals () 方法，如果没有继承的情况下回调用 Object 类的 equals () 方法，其返回值为： <code>(this == obj)</code> , 而使用 <code>==</code>  对比的是 hashcode。</p>\n</blockquote>\n<h4 id=\"java中的访问修饰符\"><a class=\"anchor\" href=\"#java中的访问修饰符\">#</a> Java 中的访问修饰符</h4>\n<ul>\n<li><strong>public：<strong>表示公共的访问修饰符，用 <code>public</code>  修饰的资源可以在任何位置访问，即</strong>任何位置有效</strong></li>\n<li>**protected：** 受保护的，在同一个包下都可以使用；但是在不同包下，只能在父子类继承中使用。</li>\n<li><strong>默认：<strong>不使用任访问何修饰符修饰，只能同一个包下访问，计</strong>包内有效</strong></li>\n<li><strong>private：<strong>私有的，表示只有自己能用，也就是</strong>本类有效</strong></li>\n</ul>\n<h4 id=\"面向对象\"><a class=\"anchor\" href=\"#面向对象\">#</a> 面向对象</h4>\n<p><strong>封装：</strong> 将内部实现进行 “黑处理”，也就是使用者不知道其内部实现，也不需要了解其内部实现，只需要按照封装者提供的使用方法便能完成功能。类中的 get 和 set 方法就是一种封装。</p>\n<p>** 继承：** 通过继承子类可以获得父类的一些属性和方法，使得子类拥有父类的能力。提高了代码的复用性</p>\n<ul>\n<li>在 Java 中继承无处不在，没有使用 extends 继承的类会默认继承 Object 类，因此 Object 是顶级类。</li>\n<li>Java 中的继承是单根继承，即一个类只有一个父类。</li>\n<li>不能继承父类中被 private 修饰的变量、方法，父类的构造方法也不能被继承。</li>\n<li>子类是可以调用父类的构造方法的，使用 super 关键字， <code>super([参数列表])</code>  即可调用父类构造方法，当然也可以通过 <code>super.属性名</code> 访问被 public 和 protected 修饰的属性值，可以通过 super 访问父类中被重写的方法 ()。</li>\n</ul>\n<p>** 多态：** 一个同名的方法，当传入的参数列表不一样时，体现出不一样的形态，即称为多态，方法重载和方法重写就是多态的一种表现形式。</p>\n","categories":["java学习"],"tags":["类与对象","构造方法","访问修饰符","封装、继承、多态"]},{"title":"Java学习札记一","url":"/Java%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E4%B8%80/","content":"<p>Java 学习札记一</p>\n<p><span id=\"more\"></span></p>\n<h4 id=\"两个变量的值交换\"><a class=\"anchor\" href=\"#两个变量的值交换\">#</a> 两个变量的值交换</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 方法一 借助第三个变量 t</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>b <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 方法二  使用加减</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>b <span class=\"token operator\">=</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a <span class=\"token operator\">=</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 方法三\t使用乘除与加减相似</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>a <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>b <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>a <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> b</pre></td></tr></table></figure><h4 id=\"switchcase-值语句\"><a class=\"anchor\" href=\"#switchcase-值语句\">#</a> switch ()....case 值：语句</h4>\n<blockquote>\n<p>①  在 swith 语句中括号类只能是 char、byte、short、int、String、enum 类型。<br />\n②  case 语句需要使用 break 退出，因为 swith 语句具有穿透性： <code>匹配成功后，就会一直执行后面的代码，知道遇到break才会终止语句。</code></p>\n</blockquote>\n<h4 id=\"for循环语句\"><a class=\"anchor\" href=\"#for循环语句\">#</a> for 循环语句</h4>\n<ul>\n<li><strong>for 循环结构：</strong>  <code>for(循环变量初始化;循环条件;循环变量更新)&#123;循环体&#125;</code></li>\n<li>** 应用场景：** 在已知所需循环次数的循环中常用。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> ；i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示循环打印出 0-9</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>注意：</strong></p>\n<ul>\n<li>for 循环中（）中的任意条件都不是必须的，即内容可以空着不写，但是 <code>;</code>  是必须要写的，可以写成 <code>for(;;)&#123;&#125;</code> 。因此可以根据实际情况设置满足不同需求的 for 循环。</li>\n<li>在 for 循环中，若循环变量 <code>i</code>  声明在 <code>()</code>  内，则在 for 循环结束后将无法获取 <code>i</code>  的值。</li>\n</ul>\n</blockquote>\n<h4 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> z <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 二维数组的声明</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> h <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 此类声明在使用时还需要对一维数组进行声明如：h [0] = new int [3]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                              <span class=\"token comment\">// 使用 Arrays.sort () 方法可以将一个数组排序</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// 通过 Arrays.binarySearch () 来查询数组中某个元素</span></pre></td></tr></table></figure><blockquote>\n<p>** 注意：** 使用数组时一定要记住定义好下标，否侧会出现数组越界的错误！在使用 <code>Arrays.binarySearch()</code>  方法时，一定要先对数组进行排序，并且该方法返回的是排序后的字符索引。</p>\n</blockquote>\n<h4 id=\"string类常用方法\"><a class=\"anchor\" href=\"#string类常用方法\">#</a> String 类常用方法</h4>\n<p>字符串类是一个不可改变的类，使用 final 修饰，因此每一次对字符进行操作都会返回一个新的字符，而不是在原有的字符串上进行操作。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Sting</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello,World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                           <span class=\"token comment\">// 返回字符串的长度</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// 将字符串转换为大写并返回</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// 将字符串转换为小写并返回</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 取出指定位置的字符并返回</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 得到某个字符第一次出现的位置</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"o\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 得到某个字符最后一次出现的位置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 按照逗号对字符串进行拆分</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 从指定位置开始截取到结束</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// 从指定位置截取到指定位置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                             <span class=\"token comment\">// 去除字符串中的空格</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 判断是否以指定字符串开始，返回布尔类型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// 判断是否以指定字符串结束，返回布尔类型</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// 是否包含 指定的字符串，返回布尔类型</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 替换指定字符串中某</span></pre></td></tr></table></figure><h4 id=\"stringbuffer类\"><a class=\"anchor\" href=\"#stringbuffer类\">#</a> StringBuffer 类</h4>\n<p>** 特点：**StringBuffer 是可以被修改的，因此相比于 String 类更加的高效。它是线程同步的。<br />\n<strong>常用方法：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">StringBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello，cat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 在原字符串末尾添加上新字符串              </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 向原来的字符串中指定位置插入字符串    </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 一次性删除指定区间的所有字符串，但补包括索引为 6 的值；</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">deleteCharAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 一次性删除一个字符，参数为对应索引；          </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 将指定字符串进行反转，得到反序字符串</span></pre></td></tr></table></figure>","categories":["java学习"],"tags":["变量交换","循环控制","String类","StringBuffer类"]},{"title":"Hello World","url":"/hello-world/","content":"<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n"}]